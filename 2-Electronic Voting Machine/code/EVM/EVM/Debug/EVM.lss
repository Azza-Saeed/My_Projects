
EVM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000a26  00000aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800070  00800070  00000aca  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001220  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c43  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c6  00000000  00000000  00001f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079a  00000000  00000000  00002329  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ac  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000557  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2c 02 	call	0x458	; 0x458 <main>
  8a:	0c 94 11 05 	jmp	0xa22	; 0xa22 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_vInit>:
* Created: 2/3/2023
**/
#include "DIO.h"
void button_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
}
  98:	08 95       	ret

0000009a <button_u8read>:
unsigned char button_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char x;
	x=DIO_u8read(portname,pinnumber);
  9a:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_u8read>
	return x ;
}
  9e:	08 95       	ret

000000a0 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  a0:	82 34       	cpi	r24, 0x42	; 66
  a2:	51 f1       	breq	.+84     	; 0xf8 <DIO_vsetPINDir+0x58>
  a4:	83 34       	cpi	r24, 0x43	; 67
  a6:	20 f4       	brcc	.+8      	; 0xb0 <DIO_vsetPINDir+0x10>
  a8:	81 34       	cpi	r24, 0x41	; 65
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0xe>
  ac:	7b c0       	rjmp	.+246    	; 0x1a4 <DIO_vsetPINDir+0x104>
  ae:	07 c0       	rjmp	.+14     	; 0xbe <DIO_vsetPINDir+0x1e>
  b0:	83 34       	cpi	r24, 0x43	; 67
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_vsetPINDir+0x16>
  b4:	3e c0       	rjmp	.+124    	; 0x132 <DIO_vsetPINDir+0x92>
  b6:	84 34       	cpi	r24, 0x44	; 68
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetPINDir+0x1c>
  ba:	74 c0       	rjmp	.+232    	; 0x1a4 <DIO_vsetPINDir+0x104>
  bc:	57 c0       	rjmp	.+174    	; 0x16c <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	69 f4       	brne	.+26     	; 0xdc <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	ac 01       	movw	r20, r24
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x30>
  cc:	44 0f       	add	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x2c>
  d4:	ba 01       	movw	r22, r20
  d6:	62 2b       	or	r22, r18
  d8:	6a bb       	out	0x1a, r22	; 26
  da:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	ac 01       	movw	r20, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_vsetPINDir+0x4a>
  e6:	44 0f       	add	r20, r20
  e8:	55 1f       	adc	r21, r21
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_vsetPINDir+0x46>
  ee:	ba 01       	movw	r22, r20
  f0:	60 95       	com	r22
  f2:	62 23       	and	r22, r18
  f4:	6a bb       	out	0x1a, r22	; 26
  f6:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
  f8:	41 30       	cpi	r20, 0x01	; 1
  fa:	69 f4       	brne	.+26     	; 0x116 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
  fc:	27 b3       	in	r18, 0x17	; 23
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	ac 01       	movw	r20, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_vsetPINDir+0x6a>
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_vsetPINDir+0x66>
 10e:	ba 01       	movw	r22, r20
 110:	62 2b       	or	r22, r18
 112:	67 bb       	out	0x17, r22	; 23
 114:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	ac 01       	movw	r20, r24
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_vsetPINDir+0x84>
 120:	44 0f       	add	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_vsetPINDir+0x80>
 128:	ba 01       	movw	r22, r20
 12a:	60 95       	com	r22
 12c:	62 23       	and	r22, r18
 12e:	67 bb       	out	0x17, r22	; 23
 130:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 132:	41 30       	cpi	r20, 0x01	; 1
 134:	69 f4       	brne	.+26     	; 0x150 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	ac 01       	movw	r20, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_vsetPINDir+0xa4>
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_vsetPINDir+0xa0>
 148:	ba 01       	movw	r22, r20
 14a:	62 2b       	or	r22, r18
 14c:	64 bb       	out	0x14, r22	; 20
 14e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 150:	24 b3       	in	r18, 0x14	; 20
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ac 01       	movw	r20, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_vsetPINDir+0xbe>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_vsetPINDir+0xba>
 162:	ba 01       	movw	r22, r20
 164:	60 95       	com	r22
 166:	62 23       	and	r22, r18
 168:	64 bb       	out	0x14, r22	; 20
 16a:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	69 f4       	brne	.+26     	; 0x18a <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 170:	21 b3       	in	r18, 0x11	; 17
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_vsetPINDir+0xde>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_vsetPINDir+0xda>
 182:	ba 01       	movw	r22, r20
 184:	62 2b       	or	r22, r18
 186:	61 bb       	out	0x11, r22	; 17
 188:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 18a:	21 b3       	in	r18, 0x11	; 17
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	ac 01       	movw	r20, r24
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_vsetPINDir+0xf8>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_vsetPINDir+0xf4>
 19c:	ba 01       	movw	r22, r20
 19e:	60 95       	com	r22
 1a0:	62 23       	and	r22, r18
 1a2:	61 bb       	out	0x11, r22	; 17
 1a4:	08 95       	ret

000001a6 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 1a6:	82 34       	cpi	r24, 0x42	; 66
 1a8:	51 f1       	breq	.+84     	; 0x1fe <DIO_write+0x58>
 1aa:	83 34       	cpi	r24, 0x43	; 67
 1ac:	20 f4       	brcc	.+8      	; 0x1b6 <DIO_write+0x10>
 1ae:	81 34       	cpi	r24, 0x41	; 65
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0xe>
 1b2:	7b c0       	rjmp	.+246    	; 0x2aa <DIO_write+0x104>
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <DIO_write+0x1e>
 1b6:	83 34       	cpi	r24, 0x43	; 67
 1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_write+0x16>
 1ba:	3e c0       	rjmp	.+124    	; 0x238 <DIO_write+0x92>
 1bc:	84 34       	cpi	r24, 0x44	; 68
 1be:	09 f0       	breq	.+2      	; 0x1c2 <DIO_write+0x1c>
 1c0:	74 c0       	rjmp	.+232    	; 0x2aa <DIO_write+0x104>
 1c2:	57 c0       	rjmp	.+174    	; 0x272 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	69 f4       	brne	.+26     	; 0x1e2 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1c8:	2b b3       	in	r18, 0x1b	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	ac 01       	movw	r20, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_write+0x30>
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_write+0x2c>
 1da:	ba 01       	movw	r22, r20
 1dc:	62 2b       	or	r22, r18
 1de:	6b bb       	out	0x1b, r22	; 27
 1e0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1e2:	2b b3       	in	r18, 0x1b	; 27
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_write+0x4a>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_write+0x46>
 1f4:	ba 01       	movw	r22, r20
 1f6:	60 95       	com	r22
 1f8:	62 23       	and	r22, r18
 1fa:	6b bb       	out	0x1b, r22	; 27
 1fc:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	69 f4       	brne	.+26     	; 0x21c <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 202:	28 b3       	in	r18, 0x18	; 24
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	ac 01       	movw	r20, r24
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_write+0x6a>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_write+0x66>
 214:	ba 01       	movw	r22, r20
 216:	62 2b       	or	r22, r18
 218:	68 bb       	out	0x18, r22	; 24
 21a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 21c:	28 b3       	in	r18, 0x18	; 24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_write+0x84>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_write+0x80>
 22e:	ba 01       	movw	r22, r20
 230:	60 95       	com	r22
 232:	62 23       	and	r22, r18
 234:	68 bb       	out	0x18, r22	; 24
 236:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	69 f4       	brne	.+26     	; 0x256 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 23c:	25 b3       	in	r18, 0x15	; 21
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	ac 01       	movw	r20, r24
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_write+0xa4>
 246:	44 0f       	add	r20, r20
 248:	55 1f       	adc	r21, r21
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_write+0xa0>
 24e:	ba 01       	movw	r22, r20
 250:	62 2b       	or	r22, r18
 252:	65 bb       	out	0x15, r22	; 21
 254:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 256:	25 b3       	in	r18, 0x15	; 21
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	ac 01       	movw	r20, r24
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_write+0xbe>
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_write+0xba>
 268:	ba 01       	movw	r22, r20
 26a:	60 95       	com	r22
 26c:	62 23       	and	r22, r18
 26e:	65 bb       	out	0x15, r22	; 21
 270:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 272:	41 30       	cpi	r20, 0x01	; 1
 274:	69 f4       	brne	.+26     	; 0x290 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 276:	22 b3       	in	r18, 0x12	; 18
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	ac 01       	movw	r20, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_write+0xde>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_write+0xda>
 288:	ba 01       	movw	r22, r20
 28a:	62 2b       	or	r22, r18
 28c:	62 bb       	out	0x12, r22	; 18
 28e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 290:	22 b3       	in	r18, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_write+0xf8>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_write+0xf4>
 2a2:	ba 01       	movw	r22, r20
 2a4:	60 95       	com	r22
 2a6:	62 23       	and	r22, r18
 2a8:	62 bb       	out	0x12, r22	; 18
 2aa:	08 95       	ret

000002ac <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 2ac:	82 34       	cpi	r24, 0x42	; 66
 2ae:	f1 f0       	breq	.+60     	; 0x2ec <DIO_u8read+0x40>
 2b0:	83 34       	cpi	r24, 0x43	; 67
 2b2:	20 f4       	brcc	.+8      	; 0x2bc <DIO_u8read+0x10>
 2b4:	81 34       	cpi	r24, 0x41	; 65
 2b6:	09 f0       	breq	.+2      	; 0x2ba <DIO_u8read+0xe>
 2b8:	4f c0       	rjmp	.+158    	; 0x358 <DIO_u8read+0xac>
 2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <DIO_u8read+0x1c>
 2bc:	83 34       	cpi	r24, 0x43	; 67
 2be:	41 f1       	breq	.+80     	; 0x310 <DIO_u8read+0x64>
 2c0:	84 34       	cpi	r24, 0x44	; 68
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <DIO_u8read+0x1a>
 2c4:	49 c0       	rjmp	.+146    	; 0x358 <DIO_u8read+0xac>
 2c6:	36 c0       	rjmp	.+108    	; 0x334 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2c8:	29 b3       	in	r18, 0x19	; 25
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	06 2e       	mov	r0, r22
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_u8read+0x2a>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_u8read+0x26>
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	82 23       	and	r24, r18
 2de:	93 23       	and	r25, r19
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_u8read+0x3a>
 2e2:	95 95       	asr	r25
 2e4:	87 95       	ror	r24
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_u8read+0x36>
		break;
 2ea:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2ec:	26 b3       	in	r18, 0x16	; 22
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	06 2e       	mov	r0, r22
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_u8read+0x4e>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_u8read+0x4a>
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	82 23       	and	r24, r18
 302:	93 23       	and	r25, r19
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_u8read+0x5e>
 306:	95 95       	asr	r25
 308:	87 95       	ror	r24
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_u8read+0x5a>
		break;
 30e:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 310:	23 b3       	in	r18, 0x13	; 19
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	06 2e       	mov	r0, r22
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8read+0x72>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_u8read+0x6e>
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	82 23       	and	r24, r18
 326:	93 23       	and	r25, r19
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_u8read+0x82>
 32a:	95 95       	asr	r25
 32c:	87 95       	ror	r24
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_u8read+0x7e>
		break;
 332:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 334:	20 b3       	in	r18, 0x10	; 16
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	06 2e       	mov	r0, r22
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_u8read+0x96>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_u8read+0x92>
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	82 23       	and	r24, r18
 34a:	93 23       	and	r25, r19
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_u8read+0xa6>
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_u8read+0xa2>
		break;
 356:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 358:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 35a:	08 95       	ret

0000035c <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 35c:	82 34       	cpi	r24, 0x42	; 66
 35e:	b9 f0       	breq	.+46     	; 0x38e <DIO_toggle+0x32>
 360:	83 34       	cpi	r24, 0x43	; 67
 362:	18 f4       	brcc	.+6      	; 0x36a <DIO_toggle+0xe>
 364:	81 34       	cpi	r24, 0x41	; 65
 366:	c9 f5       	brne	.+114    	; 0x3da <DIO_toggle+0x7e>
 368:	05 c0       	rjmp	.+10     	; 0x374 <DIO_toggle+0x18>
 36a:	83 34       	cpi	r24, 0x43	; 67
 36c:	e9 f0       	breq	.+58     	; 0x3a8 <DIO_toggle+0x4c>
 36e:	84 34       	cpi	r24, 0x44	; 68
 370:	a1 f5       	brne	.+104    	; 0x3da <DIO_toggle+0x7e>
 372:	27 c0       	rjmp	.+78     	; 0x3c2 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 374:	2b b3       	in	r18, 0x1b	; 27
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	ac 01       	movw	r20, r24
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_toggle+0x26>
 37e:	44 0f       	add	r20, r20
 380:	55 1f       	adc	r21, r21
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_toggle+0x22>
 386:	ba 01       	movw	r22, r20
 388:	62 27       	eor	r22, r18
 38a:	6b bb       	out	0x1b, r22	; 27
		break;
 38c:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 38e:	28 b3       	in	r18, 0x18	; 24
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	ac 01       	movw	r20, r24
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_toggle+0x40>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_toggle+0x3c>
 3a0:	ba 01       	movw	r22, r20
 3a2:	62 27       	eor	r22, r18
 3a4:	68 bb       	out	0x18, r22	; 24
		break;
 3a6:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 3a8:	25 b3       	in	r18, 0x15	; 21
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	ac 01       	movw	r20, r24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_toggle+0x5a>
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_toggle+0x56>
 3ba:	ba 01       	movw	r22, r20
 3bc:	62 27       	eor	r22, r18
 3be:	65 bb       	out	0x15, r22	; 21
		break;
 3c0:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3c2:	22 b3       	in	r18, 0x12	; 18
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ac 01       	movw	r20, r24
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_toggle+0x74>
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_toggle+0x70>
 3d4:	ba 01       	movw	r22, r20
 3d6:	62 27       	eor	r22, r18
 3d8:	62 bb       	out	0x12, r22	; 18
 3da:	08 95       	ret

000003dc <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3dc:	82 34       	cpi	r24, 0x42	; 66
 3de:	61 f0       	breq	.+24     	; 0x3f8 <DIO_set_port_direction+0x1c>
 3e0:	83 34       	cpi	r24, 0x43	; 67
 3e2:	18 f4       	brcc	.+6      	; 0x3ea <DIO_set_port_direction+0xe>
 3e4:	81 34       	cpi	r24, 0x41	; 65
 3e6:	69 f4       	brne	.+26     	; 0x402 <DIO_set_port_direction+0x26>
 3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <DIO_set_port_direction+0x18>
 3ea:	83 34       	cpi	r24, 0x43	; 67
 3ec:	39 f0       	breq	.+14     	; 0x3fc <DIO_set_port_direction+0x20>
 3ee:	84 34       	cpi	r24, 0x44	; 68
 3f0:	41 f4       	brne	.+16     	; 0x402 <DIO_set_port_direction+0x26>
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 3f4:	6a bb       	out	0x1a, r22	; 26
		break ;
 3f6:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 3f8:	67 bb       	out	0x17, r22	; 23
		break ;
 3fa:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 3fc:	64 bb       	out	0x14, r22	; 20
		break ;
 3fe:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 400:	61 bb       	out	0x11, r22	; 17
 402:	08 95       	ret

00000404 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 404:	82 34       	cpi	r24, 0x42	; 66
 406:	61 f0       	breq	.+24     	; 0x420 <DIO_write_port+0x1c>
 408:	83 34       	cpi	r24, 0x43	; 67
 40a:	18 f4       	brcc	.+6      	; 0x412 <DIO_write_port+0xe>
 40c:	81 34       	cpi	r24, 0x41	; 65
 40e:	69 f4       	brne	.+26     	; 0x42a <DIO_write_port+0x26>
 410:	05 c0       	rjmp	.+10     	; 0x41c <DIO_write_port+0x18>
 412:	83 34       	cpi	r24, 0x43	; 67
 414:	39 f0       	breq	.+14     	; 0x424 <DIO_write_port+0x20>
 416:	84 34       	cpi	r24, 0x44	; 68
 418:	41 f4       	brne	.+16     	; 0x42a <DIO_write_port+0x26>
 41a:	06 c0       	rjmp	.+12     	; 0x428 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 41c:	6b bb       	out	0x1b, r22	; 27
		break ;
 41e:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 420:	68 bb       	out	0x18, r22	; 24
		break ;
 422:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 424:	65 bb       	out	0x15, r22	; 21
		break ;
 426:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 428:	62 bb       	out	0x12, r22	; 18
 42a:	08 95       	ret

0000042c <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 42c:	82 34       	cpi	r24, 0x42	; 66
 42e:	61 f0       	breq	.+24     	; 0x448 <DIO_read_port+0x1c>
 430:	83 34       	cpi	r24, 0x43	; 67
 432:	18 f4       	brcc	.+6      	; 0x43a <DIO_read_port+0xe>
 434:	81 34       	cpi	r24, 0x41	; 65
 436:	71 f4       	brne	.+28     	; 0x454 <DIO_read_port+0x28>
 438:	05 c0       	rjmp	.+10     	; 0x444 <DIO_read_port+0x18>
 43a:	83 34       	cpi	r24, 0x43	; 67
 43c:	39 f0       	breq	.+14     	; 0x44c <DIO_read_port+0x20>
 43e:	84 34       	cpi	r24, 0x44	; 68
 440:	49 f4       	brne	.+18     	; 0x454 <DIO_read_port+0x28>
 442:	06 c0       	rjmp	.+12     	; 0x450 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 444:	89 b3       	in	r24, 0x19	; 25
		break ;
 446:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 448:	86 b3       	in	r24, 0x16	; 22
		break ;
 44a:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 44c:	83 b3       	in	r24, 0x13	; 19
		break ;
 44e:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 450:	80 b3       	in	r24, 0x10	; 16
		break ;
 452:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 454:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
 456:	08 95       	ret

00000458 <main>:
unsigned char counterC=0; /* counter for button C */
unsigned char counterD=0; /* counter for button D */

int main(void)
{
	LCD_vInit(); /* initialize lcd */
 458:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_vInit>
	
	/* initialize button with port B pins */
	button_vInit('B',3);
 45c:	82 e4       	ldi	r24, 0x42	; 66
 45e:	63 e0       	ldi	r22, 0x03	; 3
 460:	0e 94 49 00 	call	0x92	; 0x92 <button_vInit>
	button_vInit('B',4);
 464:	82 e4       	ldi	r24, 0x42	; 66
 466:	64 e0       	ldi	r22, 0x04	; 4
 468:	0e 94 49 00 	call	0x92	; 0x92 <button_vInit>
	button_vInit('B',5);
 46c:	82 e4       	ldi	r24, 0x42	; 66
 46e:	65 e0       	ldi	r22, 0x05	; 5
 470:	0e 94 49 00 	call	0x92	; 0x92 <button_vInit>
	button_vInit('B',6);
 474:	82 e4       	ldi	r24, 0x42	; 66
 476:	66 e0       	ldi	r22, 0x06	; 6
 478:	0e 94 49 00 	call	0x92	; 0x92 <button_vInit>
	button_vInit('B',7);
 47c:	82 e4       	ldi	r24, 0x42	; 66
 47e:	67 e0       	ldi	r22, 0x07	; 7
 480:	0e 94 49 00 	call	0x92	; 0x92 <button_vInit>
	
   /* Display string with the value of each button on lcd */
    LCD_movecursor(1,1);
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
	LCD_vSend_string("A=0");
 48c:	80 e6       	ldi	r24, 0x60	; 96
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_vSend_string>
	LCD_movecursor(1,10);
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	6a e0       	ldi	r22, 0x0A	; 10
 498:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
	LCD_vSend_string("B=0");
 49c:	84 e6       	ldi	r24, 0x64	; 100
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_vSend_string>
	LCD_movecursor(2,1);
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
	LCD_vSend_string("C=0");
 4ac:	88 e6       	ldi	r24, 0x68	; 104
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_vSend_string>
	LCD_movecursor(2,10);
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	6a e0       	ldi	r22, 0x0A	; 10
 4b8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
	LCD_vSend_string("D=0");	
 4bc:	8c e6       	ldi	r24, 0x6C	; 108
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_vSend_string>
		}		
		else if(button_u8read('B',7)==1)
		{
			counterA=counterB=counterC=counterD=0;
            LCD_movecursor(1,1);
            LCD_vSend_string("A=0");
 4c4:	00 e6       	ldi	r16, 0x60	; 96
 4c6:	10 e0       	ldi	r17, 0x00	; 0
            LCD_movecursor(1,10);
            LCD_vSend_string("B=0");
 4c8:	0f 2e       	mov	r0, r31
 4ca:	f4 e6       	ldi	r31, 0x64	; 100
 4cc:	ef 2e       	mov	r14, r31
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	ff 2e       	mov	r15, r31
 4d2:	f0 2d       	mov	r31, r0
            LCD_movecursor(2,1);
            LCD_vSend_string("C=0");
 4d4:	0f 2e       	mov	r0, r31
 4d6:	f8 e6       	ldi	r31, 0x68	; 104
 4d8:	cf 2e       	mov	r12, r31
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	df 2e       	mov	r13, r31
 4de:	f0 2d       	mov	r31, r0
            LCD_movecursor(2,10);
            LCD_vSend_string("D=0");
 4e0:	0f 2e       	mov	r0, r31
 4e2:	fc e6       	ldi	r31, 0x6C	; 108
 4e4:	af 2e       	mov	r10, r31
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	bf 2e       	mov	r11, r31
 4ea:	f0 2d       	mov	r31, r0
				LCD_vSend_char((counterD%10)+48);
			}
			else if(counterD<1000)
			{
				LCD_movecursor(2,12); /* move cursor to row 2 col 12 */
				LCD_vSend_char((counterD/100)+48); /* send asci code of the counterD to lcd */
 4ec:	d4 e6       	ldi	r29, 0x64	; 100
	LCD_movecursor(2,10);
	LCD_vSend_string("D=0");	
	
    while(1)
    {
		if(button_u8read('B',3)==1)
 4ee:	82 e4       	ldi	r24, 0x42	; 66
 4f0:	63 e0       	ldi	r22, 0x03	; 3
 4f2:	0e 94 4d 00 	call	0x9a	; 0x9a <button_u8read>
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	09 f0       	breq	.+2      	; 0x4fc <main+0xa4>
 4fa:	58 c0       	rjmp	.+176    	; 0x5ac <main+0x154>
		{
			counterA++;
 4fc:	80 91 73 00 	lds	r24, 0x0073
 500:	8f 5f       	subi	r24, 0xFF	; 255
 502:	80 93 73 00 	sts	0x0073, r24
			if(counterA<10)
 506:	8a 30       	cpi	r24, 0x0A	; 10
 508:	50 f4       	brcc	.+20     	; 0x51e <main+0xc6>
			{
				LCD_movecursor(1,3); /* move cursor to row 1 col 3 */
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char(counterA+48); /* send asci code of the counterA to lcd */
 512:	80 91 73 00 	lds	r24, 0x0073
 516:	80 5d       	subi	r24, 0xD0	; 208
 518:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 51c:	8d c1       	rjmp	.+794    	; 0x838 <main+0x3e0>
			}	
			else if(counterA<100)
 51e:	84 36       	cpi	r24, 0x64	; 100
 520:	d8 f4       	brcc	.+54     	; 0x558 <main+0x100>
			{
				LCD_movecursor(1,3); /* move cursor to row 1 col 3 */
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	63 e0       	ldi	r22, 0x03	; 3
 526:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterA/10)+48); /* send asci code of the counterA to lcd */
 52a:	80 91 73 00 	lds	r24, 0x0073
 52e:	ca e0       	ldi	r28, 0x0A	; 10
 530:	6c 2f       	mov	r22, r28
 532:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 536:	80 5d       	subi	r24, 0xD0	; 208
 538:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(1,4);
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	64 e0       	ldi	r22, 0x04	; 4
 540:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterA%10)+48); 								
 544:	80 91 73 00 	lds	r24, 0x0073
 548:	6c 2f       	mov	r22, r28
 54a:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 54e:	89 2f       	mov	r24, r25
 550:	80 5d       	subi	r24, 0xD0	; 208
 552:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 556:	70 c1       	rjmp	.+736    	; 0x838 <main+0x3e0>
			}
			else if(counterA<1000)
			{
				LCD_movecursor(1,3); /* move cursor to row 1 col 3 */
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	63 e0       	ldi	r22, 0x03	; 3
 55c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterA/100)+48); /* send asci code of the counterA to lcd */
 560:	80 91 73 00 	lds	r24, 0x0073
 564:	6d 2f       	mov	r22, r29
 566:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 56a:	80 5d       	subi	r24, 0xD0	; 208
 56c:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(1,4);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	64 e0       	ldi	r22, 0x04	; 4
 574:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char(((counterA/10)%10)+48);
 578:	80 91 73 00 	lds	r24, 0x0073
 57c:	ca e0       	ldi	r28, 0x0A	; 10
 57e:	6c 2f       	mov	r22, r28
 580:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 584:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 588:	89 2f       	mov	r24, r25
 58a:	80 5d       	subi	r24, 0xD0	; 208
 58c:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(1,5); 
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	65 e0       	ldi	r22, 0x05	; 5
 594:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterA%10)+48);								
 598:	80 91 73 00 	lds	r24, 0x0073
 59c:	6c 2f       	mov	r22, r28
 59e:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 5a2:	89 2f       	mov	r24, r25
 5a4:	80 5d       	subi	r24, 0xD0	; 208
 5a6:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 5aa:	46 c1       	rjmp	.+652    	; 0x838 <main+0x3e0>
			}		
			
		}
		else if(button_u8read('B',4)==1)
 5ac:	82 e4       	ldi	r24, 0x42	; 66
 5ae:	64 e0       	ldi	r22, 0x04	; 4
 5b0:	0e 94 4d 00 	call	0x9a	; 0x9a <button_u8read>
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	09 f0       	breq	.+2      	; 0x5ba <main+0x162>
 5b8:	58 c0       	rjmp	.+176    	; 0x66a <main+0x212>
		{
			counterB++;
 5ba:	80 91 72 00 	lds	r24, 0x0072
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	80 93 72 00 	sts	0x0072, r24
			if(counterB<10)
 5c4:	8a 30       	cpi	r24, 0x0A	; 10
 5c6:	50 f4       	brcc	.+20     	; 0x5dc <main+0x184>
			{
				LCD_movecursor(1,12); /* move cursor to row 1 col 12 */
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	6c e0       	ldi	r22, 0x0C	; 12
 5cc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char(counterB+48); /* send asci code of the counterB to lcd */
 5d0:	80 91 72 00 	lds	r24, 0x0072
 5d4:	80 5d       	subi	r24, 0xD0	; 208
 5d6:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 5da:	2e c1       	rjmp	.+604    	; 0x838 <main+0x3e0>
			}
			else if(counterB<100)
 5dc:	84 36       	cpi	r24, 0x64	; 100
 5de:	d8 f4       	brcc	.+54     	; 0x616 <main+0x1be>
			{
				LCD_movecursor(1,12); /* move cursor to row 1 col 12 */
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	6c e0       	ldi	r22, 0x0C	; 12
 5e4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterB/10)+48); /* send asci code of the counterB to lcd */
 5e8:	80 91 72 00 	lds	r24, 0x0072
 5ec:	ca e0       	ldi	r28, 0x0A	; 10
 5ee:	6c 2f       	mov	r22, r28
 5f0:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 5f4:	80 5d       	subi	r24, 0xD0	; 208
 5f6:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(1,13);
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	6d e0       	ldi	r22, 0x0D	; 13
 5fe:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterB%10)+48);
 602:	80 91 72 00 	lds	r24, 0x0072
 606:	6c 2f       	mov	r22, r28
 608:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 60c:	89 2f       	mov	r24, r25
 60e:	80 5d       	subi	r24, 0xD0	; 208
 610:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 614:	11 c1       	rjmp	.+546    	; 0x838 <main+0x3e0>
			}
			else if(counterB<1000)
			{
				LCD_movecursor(1,12); /* move cursor to row 1 col 12 */
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	6c e0       	ldi	r22, 0x0C	; 12
 61a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterB/100)+48); /* send asci code of the counterB to lcd */
 61e:	80 91 72 00 	lds	r24, 0x0072
 622:	6d 2f       	mov	r22, r29
 624:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 628:	80 5d       	subi	r24, 0xD0	; 208
 62a:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(1,13);
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	6d e0       	ldi	r22, 0x0D	; 13
 632:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char(((counterB/10)%10)+48);
 636:	80 91 72 00 	lds	r24, 0x0072
 63a:	ca e0       	ldi	r28, 0x0A	; 10
 63c:	6c 2f       	mov	r22, r28
 63e:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 642:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 646:	89 2f       	mov	r24, r25
 648:	80 5d       	subi	r24, 0xD0	; 208
 64a:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(1,14);
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	6e e0       	ldi	r22, 0x0E	; 14
 652:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterB%10)+48);
 656:	80 91 72 00 	lds	r24, 0x0072
 65a:	6c 2f       	mov	r22, r28
 65c:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 660:	89 2f       	mov	r24, r25
 662:	80 5d       	subi	r24, 0xD0	; 208
 664:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 668:	e7 c0       	rjmp	.+462    	; 0x838 <main+0x3e0>
			}
						
			
		}
		else if(button_u8read('B',5)==1)
 66a:	82 e4       	ldi	r24, 0x42	; 66
 66c:	65 e0       	ldi	r22, 0x05	; 5
 66e:	0e 94 4d 00 	call	0x9a	; 0x9a <button_u8read>
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	09 f0       	breq	.+2      	; 0x678 <main+0x220>
 676:	58 c0       	rjmp	.+176    	; 0x728 <main+0x2d0>
		{
			counterC++;
 678:	80 91 71 00 	lds	r24, 0x0071
 67c:	8f 5f       	subi	r24, 0xFF	; 255
 67e:	80 93 71 00 	sts	0x0071, r24
			if(counterC<10)
 682:	8a 30       	cpi	r24, 0x0A	; 10
 684:	50 f4       	brcc	.+20     	; 0x69a <main+0x242>
			{
				LCD_movecursor(2,3); /* move cursor to row 2 col 3 */
 686:	82 e0       	ldi	r24, 0x02	; 2
 688:	63 e0       	ldi	r22, 0x03	; 3
 68a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char(counterC+48); /* send asci code of the counterC to lcd */
 68e:	80 91 71 00 	lds	r24, 0x0071
 692:	80 5d       	subi	r24, 0xD0	; 208
 694:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 698:	cf c0       	rjmp	.+414    	; 0x838 <main+0x3e0>
			}
			else if(counterC<100)
 69a:	84 36       	cpi	r24, 0x64	; 100
 69c:	d8 f4       	brcc	.+54     	; 0x6d4 <main+0x27c>
			{
				LCD_movecursor(2,3); /* move cursor to row 2 col 3 */
 69e:	82 e0       	ldi	r24, 0x02	; 2
 6a0:	63 e0       	ldi	r22, 0x03	; 3
 6a2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterC/10)+48); /* send asci code of the counterC to lcd */
 6a6:	80 91 71 00 	lds	r24, 0x0071
 6aa:	ca e0       	ldi	r28, 0x0A	; 10
 6ac:	6c 2f       	mov	r22, r28
 6ae:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 6b2:	80 5d       	subi	r24, 0xD0	; 208
 6b4:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(2,4);
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	64 e0       	ldi	r22, 0x04	; 4
 6bc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterC%10)+48);
 6c0:	80 91 71 00 	lds	r24, 0x0071
 6c4:	6c 2f       	mov	r22, r28
 6c6:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 6ca:	89 2f       	mov	r24, r25
 6cc:	80 5d       	subi	r24, 0xD0	; 208
 6ce:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 6d2:	b2 c0       	rjmp	.+356    	; 0x838 <main+0x3e0>
			}
			else if(counterC<1000)
			{
				LCD_movecursor(2,3); /* move cursor to row 2 col 3 */
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	63 e0       	ldi	r22, 0x03	; 3
 6d8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterC/100)+48); /* send asci code of the counterC to lcd */
 6dc:	80 91 71 00 	lds	r24, 0x0071
 6e0:	6d 2f       	mov	r22, r29
 6e2:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 6e6:	80 5d       	subi	r24, 0xD0	; 208
 6e8:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(2,4);
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	64 e0       	ldi	r22, 0x04	; 4
 6f0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char(((counterC/10)%10)+48);
 6f4:	80 91 71 00 	lds	r24, 0x0071
 6f8:	ca e0       	ldi	r28, 0x0A	; 10
 6fa:	6c 2f       	mov	r22, r28
 6fc:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 700:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 704:	89 2f       	mov	r24, r25
 706:	80 5d       	subi	r24, 0xD0	; 208
 708:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(2,5);
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	65 e0       	ldi	r22, 0x05	; 5
 710:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterC%10)+48);
 714:	80 91 71 00 	lds	r24, 0x0071
 718:	6c 2f       	mov	r22, r28
 71a:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 71e:	89 2f       	mov	r24, r25
 720:	80 5d       	subi	r24, 0xD0	; 208
 722:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 726:	88 c0       	rjmp	.+272    	; 0x838 <main+0x3e0>
			}
						
		}
		else if(button_u8read('B',6))
 728:	82 e4       	ldi	r24, 0x42	; 66
 72a:	66 e0       	ldi	r22, 0x06	; 6
 72c:	0e 94 4d 00 	call	0x9a	; 0x9a <button_u8read>
 730:	88 23       	and	r24, r24
 732:	09 f4       	brne	.+2      	; 0x736 <main+0x2de>
 734:	58 c0       	rjmp	.+176    	; 0x7e6 <main+0x38e>
		{
			counterD++;
 736:	80 91 70 00 	lds	r24, 0x0070
 73a:	8f 5f       	subi	r24, 0xFF	; 255
 73c:	80 93 70 00 	sts	0x0070, r24
			if(counterD<10)
 740:	8a 30       	cpi	r24, 0x0A	; 10
 742:	50 f4       	brcc	.+20     	; 0x758 <main+0x300>
			{
				LCD_movecursor(2,12); /* move cursor to row 2 col 12 */
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	6c e0       	ldi	r22, 0x0C	; 12
 748:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char(counterD+48); /* send asci code of the counterC to lcd */
 74c:	80 91 70 00 	lds	r24, 0x0070
 750:	80 5d       	subi	r24, 0xD0	; 208
 752:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 756:	70 c0       	rjmp	.+224    	; 0x838 <main+0x3e0>
			}
			else if(counterD<100)
 758:	84 36       	cpi	r24, 0x64	; 100
 75a:	d8 f4       	brcc	.+54     	; 0x792 <main+0x33a>
			{
				LCD_movecursor(2,12); /* move cursor to row 2 col 12 */
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	6c e0       	ldi	r22, 0x0C	; 12
 760:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterD/10)+48); /* send asci code of the counterD to lcd */
 764:	80 91 70 00 	lds	r24, 0x0070
 768:	ca e0       	ldi	r28, 0x0A	; 10
 76a:	6c 2f       	mov	r22, r28
 76c:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 770:	80 5d       	subi	r24, 0xD0	; 208
 772:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(2,13);
 776:	82 e0       	ldi	r24, 0x02	; 2
 778:	6d e0       	ldi	r22, 0x0D	; 13
 77a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterD%10)+48);
 77e:	80 91 70 00 	lds	r24, 0x0070
 782:	6c 2f       	mov	r22, r28
 784:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 788:	89 2f       	mov	r24, r25
 78a:	80 5d       	subi	r24, 0xD0	; 208
 78c:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 790:	53 c0       	rjmp	.+166    	; 0x838 <main+0x3e0>
			}
			else if(counterD<1000)
			{
				LCD_movecursor(2,12); /* move cursor to row 2 col 12 */
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	6c e0       	ldi	r22, 0x0C	; 12
 796:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterD/100)+48); /* send asci code of the counterD to lcd */
 79a:	80 91 70 00 	lds	r24, 0x0070
 79e:	6d 2f       	mov	r22, r29
 7a0:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 7a4:	80 5d       	subi	r24, 0xD0	; 208
 7a6:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(2,13);
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	6d e0       	ldi	r22, 0x0D	; 13
 7ae:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char(((counterD/10)%10)+48);
 7b2:	80 91 70 00 	lds	r24, 0x0070
 7b6:	ca e0       	ldi	r28, 0x0A	; 10
 7b8:	6c 2f       	mov	r22, r28
 7ba:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 7be:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 7c2:	89 2f       	mov	r24, r25
 7c4:	80 5d       	subi	r24, 0xD0	; 208
 7c6:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
				LCD_movecursor(2,14);
 7ca:	82 e0       	ldi	r24, 0x02	; 2
 7cc:	6e e0       	ldi	r22, 0x0E	; 14
 7ce:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
				LCD_vSend_char((counterD%10)+48);			
 7d2:	80 91 70 00 	lds	r24, 0x0070
 7d6:	6c 2f       	mov	r22, r28
 7d8:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodqi4>
 7dc:	89 2f       	mov	r24, r25
 7de:	80 5d       	subi	r24, 0xD0	; 208
 7e0:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
 7e4:	29 c0       	rjmp	.+82     	; 0x838 <main+0x3e0>
		}
		}		
		else if(button_u8read('B',7)==1)
 7e6:	82 e4       	ldi	r24, 0x42	; 66
 7e8:	67 e0       	ldi	r22, 0x07	; 7
 7ea:	0e 94 4d 00 	call	0x9a	; 0x9a <button_u8read>
 7ee:	81 30       	cpi	r24, 0x01	; 1
 7f0:	19 f5       	brne	.+70     	; 0x838 <main+0x3e0>
		{
			counterA=counterB=counterC=counterD=0;
 7f2:	10 92 70 00 	sts	0x0070, r1
 7f6:	10 92 71 00 	sts	0x0071, r1
 7fa:	10 92 72 00 	sts	0x0072, r1
 7fe:	10 92 73 00 	sts	0x0073, r1
            LCD_movecursor(1,1);
 802:	61 e0       	ldi	r22, 0x01	; 1
 804:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
            LCD_vSend_string("A=0");
 808:	c8 01       	movw	r24, r16
 80a:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_vSend_string>
            LCD_movecursor(1,10);
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	6a e0       	ldi	r22, 0x0A	; 10
 812:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
            LCD_vSend_string("B=0");
 816:	c7 01       	movw	r24, r14
 818:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_vSend_string>
            LCD_movecursor(2,1);
 81c:	82 e0       	ldi	r24, 0x02	; 2
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
            LCD_vSend_string("C=0");
 824:	c6 01       	movw	r24, r12
 826:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_vSend_string>
            LCD_movecursor(2,10);
 82a:	82 e0       	ldi	r24, 0x02	; 2
 82c:	6a e0       	ldi	r22, 0x0A	; 10
 82e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_movecursor>
            LCD_vSend_string("D=0");
 832:	c5 01       	movw	r24, r10
 834:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_vSend_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 838:	8f e7       	ldi	r24, 0x7F	; 127
 83a:	9a e1       	ldi	r25, 0x1A	; 26
 83c:	a6 e0       	ldi	r26, 0x06	; 6
 83e:	81 50       	subi	r24, 0x01	; 1
 840:	90 40       	sbci	r25, 0x00	; 0
 842:	a0 40       	sbci	r26, 0x00	; 0
 844:	e1 f7       	brne	.-8      	; 0x83e <main+0x3e6>
 846:	00 c0       	rjmp	.+0      	; 0x848 <main+0x3f0>
 848:	00 00       	nop
 84a:	51 ce       	rjmp	.-862    	; 0x4ee <main+0x96>

0000084c <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 84c:	82 e4       	ldi	r24, 0x42	; 66
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	41 e0       	ldi	r20, 0x01	; 1
 852:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
 856:	8f e9       	ldi	r24, 0x9F	; 159
 858:	9f e0       	ldi	r25, 0x0F	; 15
 85a:	01 97       	sbiw	r24, 0x01	; 1
 85c:	f1 f7       	brne	.-4      	; 0x85a <send_falling_edge+0xe>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
 860:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 862:	82 e4       	ldi	r24, 0x42	; 66
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	40 e0       	ldi	r20, 0x00	; 0
 868:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
 86c:	8f e9       	ldi	r24, 0x9F	; 159
 86e:	9f e0       	ldi	r25, 0x0F	; 15
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	f1 f7       	brne	.-4      	; 0x870 <__stack+0x11>
 874:	00 c0       	rjmp	.+0      	; 0x876 <__stack+0x17>
 876:	00 00       	nop
	_delay_ms(2);
}
 878:	08 95       	ret

0000087a <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
 87a:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
 87c:	81 e4       	ldi	r24, 0x41	; 65
 87e:	0e 94 02 02 	call	0x404	; 0x404 <DIO_write_port>
	DIO_write('B',RS,0);
 882:	82 e4       	ldi	r24, 0x42	; 66
 884:	61 e0       	ldi	r22, 0x01	; 1
 886:	40 e0       	ldi	r20, 0x00	; 0
 888:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
	send_falling_edge();
 88c:	0e 94 26 04 	call	0x84c	; 0x84c <send_falling_edge>
 890:	8f ec       	ldi	r24, 0xCF	; 207
 892:	97 e0       	ldi	r25, 0x07	; 7
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	f1 f7       	brne	.-4      	; 0x894 <LCD_vSend_cmd+0x1a>
 898:	00 c0       	rjmp	.+0      	; 0x89a <LCD_vSend_cmd+0x20>
 89a:	00 00       	nop
	write_high_nibble('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
 89c:	08 95       	ret

0000089e <LCD_vInit>:
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	91 ee       	ldi	r25, 0xE1	; 225
 8a2:	a4 e0       	ldi	r26, 0x04	; 4
 8a4:	81 50       	subi	r24, 0x01	; 1
 8a6:	90 40       	sbci	r25, 0x00	; 0
 8a8:	a0 40       	sbci	r26, 0x00	; 0
 8aa:	e1 f7       	brne	.-8      	; 0x8a4 <LCD_vInit+0x6>
 8ac:	00 c0       	rjmp	.+0      	; 0x8ae <LCD_vInit+0x10>
 8ae:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
 8b0:	81 e4       	ldi	r24, 0x41	; 65
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	41 e0       	ldi	r20, 0x01	; 1
 8b6:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
 8ba:	81 e4       	ldi	r24, 0x41	; 65
 8bc:	61 e0       	ldi	r22, 0x01	; 1
 8be:	41 e0       	ldi	r20, 0x01	; 1
 8c0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
 8c4:	81 e4       	ldi	r24, 0x41	; 65
 8c6:	62 e0       	ldi	r22, 0x02	; 2
 8c8:	41 e0       	ldi	r20, 0x01	; 1
 8ca:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
 8ce:	81 e4       	ldi	r24, 0x41	; 65
 8d0:	63 e0       	ldi	r22, 0x03	; 3
 8d2:	41 e0       	ldi	r20, 0x01	; 1
 8d4:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
 8d8:	81 e4       	ldi	r24, 0x41	; 65
 8da:	64 e0       	ldi	r22, 0x04	; 4
 8dc:	41 e0       	ldi	r20, 0x01	; 1
 8de:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 8e2:	81 e4       	ldi	r24, 0x41	; 65
 8e4:	65 e0       	ldi	r22, 0x05	; 5
 8e6:	41 e0       	ldi	r20, 0x01	; 1
 8e8:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 8ec:	81 e4       	ldi	r24, 0x41	; 65
 8ee:	66 e0       	ldi	r22, 0x06	; 6
 8f0:	41 e0       	ldi	r20, 0x01	; 1
 8f2:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 8f6:	81 e4       	ldi	r24, 0x41	; 65
 8f8:	67 e0       	ldi	r22, 0x07	; 7
 8fa:	41 e0       	ldi	r20, 0x01	; 1
 8fc:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 900:	82 e4       	ldi	r24, 0x42	; 66
 902:	60 e0       	ldi	r22, 0x00	; 0
 904:	41 e0       	ldi	r20, 0x01	; 1
 906:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 90a:	82 e4       	ldi	r24, 0x42	; 66
 90c:	62 e0       	ldi	r22, 0x02	; 2
 90e:	41 e0       	ldi	r20, 0x01	; 1
 910:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 914:	82 e4       	ldi	r24, 0x42	; 66
 916:	61 e0       	ldi	r22, 0x01	; 1
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
 91e:	82 e4       	ldi	r24, 0x42	; 66
 920:	62 e0       	ldi	r22, 0x02	; 2
 922:	40 e0       	ldi	r20, 0x00	; 0
 924:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
 928:	88 e3       	ldi	r24, 0x38	; 56
 92a:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_vSend_cmd>
 92e:	af ec       	ldi	r26, 0xCF	; 207
 930:	b7 e0       	ldi	r27, 0x07	; 7
 932:	11 97       	sbiw	r26, 0x01	; 1
 934:	f1 f7       	brne	.-4      	; 0x932 <LCD_vInit+0x94>
 936:	00 c0       	rjmp	.+0      	; 0x938 <LCD_vInit+0x9a>
 938:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 93a:	8c e0       	ldi	r24, 0x0C	; 12
 93c:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_vSend_cmd>
 940:	8f ec       	ldi	r24, 0xCF	; 207
 942:	97 e0       	ldi	r25, 0x07	; 7
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	f1 f7       	brne	.-4      	; 0x944 <LCD_vInit+0xa6>
 948:	00 c0       	rjmp	.+0      	; 0x94a <LCD_vInit+0xac>
 94a:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_vSend_cmd>
 952:	af e1       	ldi	r26, 0x1F	; 31
 954:	be e4       	ldi	r27, 0x4E	; 78
 956:	11 97       	sbiw	r26, 0x01	; 1
 958:	f1 f7       	brne	.-4      	; 0x956 <LCD_vInit+0xb8>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <LCD_vInit+0xbe>
 95c:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 95e:	86 e0       	ldi	r24, 0x06	; 6
 960:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_vSend_cmd>
 964:	8f ec       	ldi	r24, 0xCF	; 207
 966:	97 e0       	ldi	r25, 0x07	; 7
 968:	01 97       	sbiw	r24, 0x01	; 1
 96a:	f1 f7       	brne	.-4      	; 0x968 <LCD_vInit+0xca>
 96c:	00 c0       	rjmp	.+0      	; 0x96e <LCD_vInit+0xd0>
 96e:	00 00       	nop
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
 970:	08 95       	ret

00000972 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 972:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port('A',data);
 974:	81 e4       	ldi	r24, 0x41	; 65
 976:	0e 94 02 02 	call	0x404	; 0x404 <DIO_write_port>
	DIO_write('B',RS,1);
 97a:	82 e4       	ldi	r24, 0x42	; 66
 97c:	61 e0       	ldi	r22, 0x01	; 1
 97e:	41 e0       	ldi	r20, 0x01	; 1
 980:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
	send_falling_edge();
 984:	0e 94 26 04 	call	0x84c	; 0x84c <send_falling_edge>
 988:	8f ec       	ldi	r24, 0xCF	; 207
 98a:	97 e0       	ldi	r25, 0x07	; 7
 98c:	01 97       	sbiw	r24, 0x01	; 1
 98e:	f1 f7       	brne	.-4      	; 0x98c <LCD_vSend_char+0x1a>
 990:	00 c0       	rjmp	.+0      	; 0x992 <LCD_vSend_char+0x20>
 992:	00 00       	nop
	write_high_nibble('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
 994:	08 95       	ret

00000996 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 99c:	88 81       	ld	r24, Y
 99e:	88 23       	and	r24, r24
 9a0:	31 f0       	breq	.+12     	; 0x9ae <LCD_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
 9a2:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
 9a4:	0e 94 b9 04 	call	0x972	; 0x972 <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 9a8:	89 91       	ld	r24, Y+
 9aa:	88 23       	and	r24, r24
 9ac:	d9 f7       	brne	.-10     	; 0x9a4 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	08 95       	ret

000009b4 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_vSend_cmd>
 9ba:	8f e1       	ldi	r24, 0x1F	; 31
 9bc:	9e e4       	ldi	r25, 0x4E	; 78
 9be:	01 97       	sbiw	r24, 0x01	; 1
 9c0:	f1 f7       	brne	.-4      	; 0x9be <LCD_clearscreen+0xa>
 9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <LCD_clearscreen+0x10>
 9c4:	00 00       	nop
	_delay_ms(10);
}
 9c6:	08 95       	ret

000009c8 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 9c8:	28 2f       	mov	r18, r24
 9ca:	21 50       	subi	r18, 0x01	; 1
 9cc:	22 30       	cpi	r18, 0x02	; 2
 9ce:	70 f4       	brcc	.+28     	; 0x9ec <LCD_movecursor+0x24>
 9d0:	61 31       	cpi	r22, 0x11	; 17
 9d2:	70 f4       	brcc	.+28     	; 0x9f0 <LCD_movecursor+0x28>
 9d4:	66 23       	and	r22, r22
 9d6:	71 f0       	breq	.+28     	; 0x9f4 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 9d8:	81 30       	cpi	r24, 0x01	; 1
 9da:	19 f4       	brne	.+6      	; 0x9e2 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 9dc:	96 2f       	mov	r25, r22
 9de:	91 58       	subi	r25, 0x81	; 129
 9e0:	0a c0       	rjmp	.+20     	; 0x9f6 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 9e2:	82 30       	cpi	r24, 0x02	; 2
 9e4:	41 f4       	brne	.+16     	; 0x9f6 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 9e6:	96 2f       	mov	r25, r22
 9e8:	91 54       	subi	r25, 0x41	; 65
 9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 9ec:	90 e8       	ldi	r25, 0x80	; 128
 9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <LCD_movecursor+0x2e>
 9f0:	90 e8       	ldi	r25, 0x80	; 128
 9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <LCD_movecursor+0x2e>
 9f4:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 9f6:	89 2f       	mov	r24, r25
 9f8:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_vSend_cmd>
 9fc:	8f ec       	ldi	r24, 0xCF	; 207
 9fe:	97 e0       	ldi	r25, 0x07	; 7
 a00:	01 97       	sbiw	r24, 0x01	; 1
 a02:	f1 f7       	brne	.-4      	; 0xa00 <LCD_movecursor+0x38>
 a04:	00 c0       	rjmp	.+0      	; 0xa06 <LCD_movecursor+0x3e>
 a06:	00 00       	nop
	_delay_ms(1);
}
 a08:	08 95       	ret

00000a0a <__udivmodqi4>:
 a0a:	99 1b       	sub	r25, r25
 a0c:	79 e0       	ldi	r23, 0x09	; 9
 a0e:	04 c0       	rjmp	.+8      	; 0xa18 <__udivmodqi4_ep>

00000a10 <__udivmodqi4_loop>:
 a10:	99 1f       	adc	r25, r25
 a12:	96 17       	cp	r25, r22
 a14:	08 f0       	brcs	.+2      	; 0xa18 <__udivmodqi4_ep>
 a16:	96 1b       	sub	r25, r22

00000a18 <__udivmodqi4_ep>:
 a18:	88 1f       	adc	r24, r24
 a1a:	7a 95       	dec	r23
 a1c:	c9 f7       	brne	.-14     	; 0xa10 <__udivmodqi4_loop>
 a1e:	80 95       	com	r24
 a20:	08 95       	ret

00000a22 <_exit>:
 a22:	f8 94       	cli

00000a24 <__stop_program>:
 a24:	ff cf       	rjmp	.-2      	; 0xa24 <__stop_program>
